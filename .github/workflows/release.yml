# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Create Release
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Echo
        run: |
          echo Created new Tag ${{ github.ref }}

      # Checks-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout code
        uses: actions/checkout@v2
              
      # This would actually build package (create executables) and zip them
      # in chart-vXXX.zip file which is later uploaded as release artifact
      # Note in 'zip --junk-paths chart-${{ github.ref }} dist/**'
      # the option '--junk-paths' will not create the folder 'dist' but will just zip its contents
      - name: Build and package executables - create a ZIP latest
        run: |
          npm run build
          npm run pkg
          zip --junk-paths chart dist/**

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |    # It's better to use body_path, which actually will dynamically use the contents of the specified file, body is not so "dynamic"
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./chart.zip
          asset_name: chart-${{ github.ref }}.zip
          asset_content_type: application/zip
