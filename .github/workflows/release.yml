# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Create Release
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Begin
        id: init
        run: |
          echo "::set-output name=TAG_NAME::${GITHUB_REF#refs/tags/}"
          echo "Create a new Realse from the new Tag ${{ github.ref }}"

      # Checks-out repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # Install the project's deendancies and the global 'pkg' npm module   
      - name: Prepare
        env:
          # This is needed for installing global NPM packages as otherwise NPM will put them in
          # /usr/local/lib/node_modules where the local user has no access.
          NPM_CONFIG_PREFIX: "~/.npm-global"
        run: |
          npm install -g pkg
          npm install
              
      # This would actually build package (create executables) and zip them
      # in chart-vXXX.zip file which is later uploaded as release artifact.
      # Note in 'zip --junk-paths chart-${{ github.ref }} dist/**'
      # the option '--junk-paths' will not create the folder 'dist' but will just zip its contents
      - name: Build and package executables - create a ZIP artifact
        env:
          NPM_CONFIG_PREFIX: "~/.npm-global"
        run: |
          export PATH=$PATH:${{ env.NPM_CONFIG_PREFIX }}/bin
          npm run build
          npm run pkg
          zip --junk-paths chart dist/**

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |    # It's better to use body_path, which actually will dynamically use the contents of the specified file, body is not so "dynamic"
            Changes in this Release
            - First Change
            - Second Change
            - Use a real CHANGES.md file and set its path to body_path 
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./chart.zip
          asset_name: chart-${{ steps.init.outputs.TAG_NAME }}.zip # create asset with name 'chart-vXXX.zip'
          asset_content_type: application/zip

# Notes
# 1.Fix the 'pkg' NPM global package usage:
#    1. Use env variable NPM_CONFIG_PREFIX, here only the bin path must be added before using it (export PATH=$PATH:${{ env.NPM_CONFIG_PREFIX }}/bin)
#    2. Another way - Use "sudo npm install -g pkg"   - haven't tested it    
#    3. Another way - Use "sudo chown -R $USER /usr/local/lib/node_modules" before "npm install -g pkg"  - haven't tested it

# 2. Extract The github.ref is in the form "refs/tags/vXXX" so try to strip the "refs/tags/" prefix
#    1. Use the  "set-output" command in the workflow to set an output parameter value, e.g. "::set-output name={name}::{value}""
#         In this case the TAG_NAME ouptut parameter:
#           - name: Step one
#             id: step_one
#             echo '::set-output name=TAG_NAME::${GITHUB_REF#refs/tags/}'
#         Note: here GITHUB_REF is just an environment variable same as the "${{ github_ref }}"" context value
#         Note: here # is just bash string operator (${variable#pattern}, e.g. Remove shortest starting match)
#               see https://sookocheff.com/post/bash/bash-string-operators/
#               so ${'refs/tags/vXXX'#refs/tags/} will be vXXX
#    2. The in anouther step use this output parameter
#           - name: Step another
#             run: echo "The tag name is ${{ steps.step_one.outputs.TAG_NAME }}"

# TODO: Use 'body_path' in the 'create-release' action as it allows to get the specified file's content, with 'body' this is hardcoded now